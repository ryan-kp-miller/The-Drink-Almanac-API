// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "the-drink-almanac-api/model"

	mock "github.com/stretchr/testify/mock"
)

// FavoriteService is an autogenerated mock type for the FavoriteService type
type FavoriteService struct {
	mock.Mock
}

// CreateNewFavorite provides a mock function with given fields: userId, drinkId
func (_m *FavoriteService) CreateNewFavorite(userId string, drinkId string) (*model.Favorite, error) {
	ret := _m.Called(userId, drinkId)

	var r0 *model.Favorite
	if rf, ok := ret.Get(0).(func(string, string) *model.Favorite); ok {
		r0 = rf(userId, drinkId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Favorite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, drinkId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFavorite provides a mock function with given fields: id
func (_m *FavoriteService) DeleteFavorite(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllFavorites provides a mock function with given fields:
func (_m *FavoriteService) FindAllFavorites() ([]model.Favorite, error) {
	ret := _m.Called()

	var r0 []model.Favorite
	if rf, ok := ret.Get(0).(func() []model.Favorite); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Favorite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFavoritesByUser provides a mock function with given fields: userID
func (_m *FavoriteService) FindFavoritesByUser(userID string) ([]model.Favorite, error) {
	ret := _m.Called(userID)

	var r0 []model.Favorite
	if rf, ok := ret.Get(0).(func(string) []model.Favorite); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Favorite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFavoriteService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFavoriteService creates a new instance of FavoriteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFavoriteService(t mockConstructorTestingTNewFavoriteService) *FavoriteService {
	mock := &FavoriteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
